<?php

/**
 * @file
 * User interface tweaks and other modifications for the Stanford Sites platform
 */

// How often system should check file system usage. 1 time a day.
define('SSH_QUOTA_CHECK_LIMIT', 60 * 60 * 24);
// Whole integer percentage in which to check against.
define('STANFORD_SUBSITE_HELPER_AFSQUOTA_THRESHOLD', 90);

/**
 * Implements hook_init().
 */
function stanford_sites_helper_init() {
  $path = drupal_get_path('module', 'stanford_sites_helper') . '/css/stanford-sites-helper.css';

  // Check to see if the quota is passed the threshold.
  // If it is then prompt the user with a message.
  if(!_is_ajax_request() && user_is_logged_in() && _stanford_sites_helper_check_quota()) {
    _stanford_sites_helper_set_quota_warning_message();
  }

}


/**
 * Implements hook_theme_registry_alter().
 */
function stanford_sites_helper_theme_registry_alter(&$theme_registry) {
  $theme_registry['search_results']['theme paths'] = array(0 => drupal_get_path('module', 'stanford_sites_helper') . '/templates');
  $theme_registry['search_results']['theme path'] = drupal_get_path('module', 'stanford_sites_helper') . '/templates';
  $theme_registry['search_results']['path'] = drupal_get_path('module', 'stanford_sites_helper') . '/templates';
  $theme_registry['search_results']['template'] = 'search-results';
  $theme_registry['block__stanford_sites_helper__firststeps']['theme paths'] = array(0 => drupal_get_path('module', 'stanford_sites_helper') . '/templates');
  $theme_registry['block__stanford_sites_helper__firststeps']['theme path'] = drupal_get_path('module', 'stanford_sites_helper') . '/templates';
  $theme_registry['block__stanford_sites_helper__firststeps']['path'] = drupal_get_path('module', 'stanford_sites_helper') . '/templates';
  $theme_registry['block__stanford_sites_helper__firststeps']['template'] = 'firststeps';
  $theme_registry['block__stanford_sites_helper__firststeps']['type'] = 'module';
}

/**
 * Returns a translatable string of help text for a search that returns no results.
 */
function stanford_sites_helper_search_noresults() {
  $content = '<ul>';
  $content .= '<li>' . t('Check if your spelling is correct.') . '</li>';
  $content .= '<li>' . t('Simplify your search by using fewer words.') . '</li>';
  $content .= '<li>' . t('Remove quotes around phrases to match each word individually: %stanfordquote will match less than %stanfordnoquote.', array('%stanfordquote' => '"stanford university"', '%stanfordnoquote' => 'stanford university')) . '</li>';
  $content .= '<li>' . t('Consider loosening your query with <em>OR</em>: <em>stanford university</em> will match less than <em>stanford OR university</em>.') . '</li>';
  $content .= '</ul>';
  return $content;
}

/**
 * Implements hook_block_info().
 */
function stanford_sites_helper_block_info() {
  $blocks['helplinks']['info'] = t('Display a list of help links specific to Stanford Sites');
  $blocks['helplinks']['properties']['administrative'] = 1;
  $blocks['helplinks']['status'] = 1;
  $blocks['helplinks']['region'] = 'help';
  $blocks['helplinks']['visibility'] = BLOCK_VISIBILITY_LISTED;
  $blocks['helplinks']['pages'] = "admin\nadmin/*";
  $blocks['firststeps']['info'] = t('Stanford Sites Welcome Text');
  $blocks['firststeps']['status'] = 1;
  $blocks['firststeps']['weight'] = 10;
  $blocks['firststeps']['region'] = 'content';
  $blocks['firststeps']['visibility'] = BLOCK_VISIBILITY_LISTED;
  $blocks['firststeps']['pages'] = "<front>";
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function stanford_sites_helper_block_view($delta) {
  switch ($delta) {
    case 'helplinks':
      $block['subject'] = t('Get Help');
      $block['content'] = t('Problems using this service? Submit a !helpsu. <hr />', array('!helpsu' => l('HelpSU request', 'http://remedyweb.stanford.edu/helpsu/2.0/helpsu-form?pcat=sites')));
      break;
    case 'firststeps':
      $block['subject'] = t('Quick Steps to Get Started');
      $block['content'] = '.';
      break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function stanford_sites_helper_menu() {
  $items['getting-started'] = array(
    'title' => 'Getting Started',
    'page callback' => 'theme',
    'page arguments' => array('firststeps_template'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/stanford-sites-helper/filequota/check'] = array(
    'title' => 'Check File Storage Quota',
    'page callback' => 'stanford_sites_helper_page_check_quota',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Page callback.
 */
function stanford_sites_helper_theme($existing, $type, $theme, $path) {
  return array(
    'firststeps_template' => array(
      'template' => 'templates/firststeps',
    ),
  );
}
/**
 * Implements hook_backup_migrate_profiles().
 */
function stanford_sites_helper_backup_migrate_profiles() {
  //set this profile as default
  variable_set('backup_migrate_profile_id', 'stanford_sites_default');

  $out = array();

  // Get the stanford_sites_default profile.
  $out['stanford_sites_default'] = backup_migrate_crud_create_item('profile', array(
    'profile_id' => 'stanford_sites_default',
    'name' => 'Stanford Sites Profile',
    'filename' => '[site:name]',
    'append_timestamp' => '1',
    'timestamp_format' => 'Y-m-d\\TH-i-s',
    'filters' =>
    array(
      'compression' => 'gzip',
      'notify_success_enable' => 0,
      'notify_success_email' => '',
      'notify_failure_enable' => 0,
      'notify_failure_email' => '',
      'utils_site_offline' => 0,
      'utils_site_offline_message' => 'This site is currently under maintenance. We should be back shortly. Thank you for your patience.',
      'utils_description' => '',
      'destinations' =>
      array(
        'db' =>
        array(
          'exclude_tables' =>
          array(
          ),
          'nodata_tables' =>
          array(
            'cache' => 'cache',
            'cache_admin_menu' => 'cache_admin_menu',
            'cache_block' => 'cache_block',
            'cache_bootstrap' => 'cache_bootstrap',
            'cache_field' => 'cache_field',
            'cache_filter' => 'cache_filter',
            'cache_form' => 'cache_form',
            'cache_image' => 'cache_image',
            'cache_menu' => 'cache_menu',
            'cache_page' => 'cache_page',
            'cache_path' => 'cache_path',
            'cache_update' => 'cache_update',
            'cache_views' => 'cache_views',
            'cache_views_data' => 'cache_views_data',
            'search_dataset' => 'search_dataset',
            'search_index' => 'search_index',
            'search_total' => 'search_total',
            'sessions' => 'sessions',
            'watchdog' => 'watchdog',
          ),
          'utils_lock_tables' => 0,
          'use_mysqldump' => 0,
        ),
        'files' =>
        array(
          'exclude_filepaths' => 'backup_migrate
  styles
  css
  js
  ctools
  .htaccess
  tmp
  private',
        ),
        'files_private' =>
        array(
          'exclude_filepaths' => 'backup_migrate
  styles
  css
  js
  ctools
  .htaccess
  tmp',
        ),
      ),
      'encryption' => 'none',
      'utils_disable_query_log' => true,
    ),
  )
);

  return $out;

}

/**
 * Fix spell check as you type (scayt) autostart behavior.
 * See http://drupal.org/node/817894 for reference.
 */
function stanford_sites_helper_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    $settings['scayt_autoStartup'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_sites_helper_form_user_pass_alter(&$form, &$form_state, $form_id) {
  $message = t('If you are having difficulty resetting your password, please !submithelpsu.', array('!submithelpsu' => l('submit a HelpSU request', 'https://helpsu.stanford.edu/?pcat=sites')));
  $form['name']['#suffix'] = $message;
}

/**
 * Implements hook_file_insert().
 */
function stanford_sites_helper_file_insert($file) {

  // Every time a new file is saved we should run the check quota.
  variable_set('stanford_sites_helper_afsquota_threshold_bool', 0);
  variable_set('stanford_sites_helper_afsquota_ts', 0);

  if (_stanford_sites_helper_check_quota()) {
    _stanford_sites_helper_set_quota_warning_message();
  }
}

/**
 * Implements hook_file_update().
 */
function stanford_sites_helper_file_update($file) {

  // Every time a new file is updated we should run the check quota.
  variable_set('stanford_sites_helper_afsquota_threshold_bool', 0);
  variable_set('stanford_sites_helper_afsquota_ts', 0);

  if (_stanford_sites_helper_check_quota()) {
    _stanford_sites_helper_set_quota_warning_message();
  }
}

/**
 * Implements hook_file_delete().
 */
function stanford_sites_helper_file_delete($file) {
  // Every time a file is deleted we should reset the clock.
  variable_set('stanford_sites_helper_afsquota_threshold_bool', 0);
  variable_set('stanford_sites_helper_afsquota_ts', 0);
}
/**
 * Implements hook_mail
 */
function stanford_sites_helper_mail($key, &$message, $params) {
  switch ($key) {
    case 'afsquota_warning':
      $usage = _stanford_sites_helper_get_usage();
      $site_url = url("<front>", array('absolute' => TRUE));

      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

      $message['subject'] = "You are nearing your storage limit on " . $params['site_name'];
      //$message['body'][] = url('<front>', array('absolute' => TRUE)) . " is nearing the file storage limit. Currently, " . $usage . "% of your allocated storage is being used. Please submit a file storage increase request to HelpSU or your website may experience issues and possible downtime. To request a storage increase please use the HelpSU request form found at: http://helpsu.stanford.edu/?pcat=sites. \n\nThank you,\nStanford Sites Team";
      $message['body'][] = $site_url . " is nearing the file storage limit. \n";
      $message['body'][] = "You are currently using " . $usage . "% of your available space for uploaded files for this website, which includes documents and images. You can " . l('submit a HelpSU request', 'http://helpsu.stanford.edu/?pcat=sites') ." to increase your limit. In the Request Description field include the phrase: &#8216Please increase the afs quota of " . $site_url . "&#8217; " . l('Submit HelpSU Request', 'http://helpsu.stanford.edu/?pcat=sites');
      $message['body'][] = "\n\nIf you think this message is incorrect or the issue has been resolved, you can try checking again. " . l('Check available space.', 'admin/config/stanford-sites-helper/filequota/check', array('absolute' => TRUE));

      break;
  }
}


// -----------------------------------------------------------------------------
// AFS QUOTA CHECK HELPERS -----------------------------------------------------
// -----------------------------------------------------------------------------

/**
 * url: admin/config/stanford-sites-helper/filequota/check
 * A page to manually check the quota available. Provides additional
 * information and bypasses the limit check.
 * @return  'string' page markup
 */
function stanford_sites_helper_page_check_quota() {
  $output = '';

  variable_set('stanford_sites_helper_afsquota_threshold_bool', 0);
  variable_set('stanford_sites_helper_afsquota_ts', 0);

  $check = _stanford_sites_helper_check_quota();

  if($check){
    $output .= "<h3 class=\"warning\">" . t('You are nearing your file storage limit. Please submit a ') . l('HelpSU request' , 'http://helpsu.stanford.edu/?pcat=sites') . t(' for more storage.') . "</h3>";
  }
  else {
    $output .= "<h3>" . t('No problems here!') . "</h3><p>" . t('You are well under your file storage limit. Please carry on your site tasks as normal. For more information please see the ') . l('site status report page.', 'admin/reports/status') . "</p>";
  }

  return $output;
}

/**
 * Returns the quota boolean. Quota boolean is a switch for under or over quota.
 * @return [type] [description]
 */
function _stanford_sites_helper_get_quota_bool() {
  return variable_get('stanford_sites_helper_afsquota_threshold_bool', 0);
}

/**
 * Check quota function performs the file system storage usage check. If the
 * qouta threshold has been surpassed an email is sent to user 1 and a message
 * is prompted to administration users.
 * @return boolean - True for over threshold.
 */
function _stanford_sites_helper_check_quota() {

  // Check if we need to check.
  $last_check = variable_get('stanford_sites_helper_afsquota_ts', 0);
  if(($last_check + SSH_QUOTA_CHECK_LIMIT) < time()) {
    $usage = _stanford_sites_helper_get_usage();
    if($usage >= STANFORD_SUBSITE_HELPER_AFSQUOTA_THRESHOLD) {
      variable_set('stanford_sites_helper_afsquota_threshold_bool', 1);

      $have_i_sent_email = variable_get('stanford_sites_helper_afsquota_sent_email', 0);
      if($have_i_sent_email == 0) {
        _stanford_sites_helper_send_warning_email();
        variable_set('stanford_sites_helper_afsquota_sent_email', 1);
      }
      return TRUE;
    }
    else {
      // Quota is back to being ok. Reset warning bool and email notification.
      variable_set('stanford_sites_helper_afsquota_threshold_bool', 0);
      variable_set('stanford_sites_helper_afsquota_sent_email', 0);
      return FALSE;
    }
  }

  // See if the quota message has been tiggered.
  // If it has then we return.
  if(_stanford_sites_helper_get_quota_bool()) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Returns an array of information about file system usage
 * @return array - An array of information
 * - volume name
 * - quota in bits
 * - used space in bits
 * - used percentage
 * - Total disk usage percentage
 */
function _stanford_sites_helper_get_usage_info() {
  variable_set('stanford_sites_helper_afsquota_ts', time());
  $raw = shell_exec(escapeshellcmd('fs lq sites/default/files'));

  // Volume Name | Quota | Used | %Used | Partition
  // list($volume_name, $max_quota, $bytes_used, $percentage_used, $partition_usage) = explode($raw, " ");

  $keys = array(
    'volume_name',
    'max_bits_quota',
    'bits_used',
    'percentage_used',
    'partition_usage',
  );

  $results = preg_split('/[\r\n]+/', $raw, -1, PREG_SPLIT_NO_EMPTY);
  $data = preg_split('/ +/', trim($results[1]));

  // If for some reason the above processing does not produce an array of
  // information we should throw out an exception.
  if(!is_array($data) || count($data) < 5) {
    throw new Exception("Could not get file storage data.");
  }

  // remove anything but numbers from data
  $data[3] = preg_replace('/[^0-9]/', '', $data[3]);
  $data[4] = preg_replace('/[^0-9]/', '', $data[4]);

  // Ensure only 5 pieces of data.
  $data = array_slice($data, 0, 5);

  // Key the data and return to caller.
  return array_combine($keys, $data);
}

/**
 * Returns the percentage of disk usage.
 * @return integer
 */
function _stanford_sites_helper_get_usage() {

  try{
    $info = _stanford_sites_helper_get_usage_info();
  }
  catch (Exception $e) {
    watchdog('stanford_sites_helper', 'Error getting file storage data. Possibly could not execute shell function or shell function does not exist.');
    return 0;
  }

  variable_set('stanford_sites_helper_afsquota_current', $info['percentage_used']);
  return $info['percentage_used'];
}

/**
 * Creates a user message for adminstrators to let them know that their afs
 * storage is nearing its limit.
 */
function _stanford_sites_helper_set_quota_warning_message() {

  global $user;

  // Do not add message for non authenticated users.
  if(!user_is_logged_in()) {
    return;
  }

  $accepted_roles = variable_get('stanford_sites_helper_afsquota_roles', array('administrator'));
  $check = array_intersect($accepted_roles, array_values($user->roles));

  // Do not add message for non admin type users.
  if(!$check) {
    return;
  }

  $usage = _stanford_sites_helper_get_usage();

  $message = t('You are currently using ' . $usage . '% of your available storage. Please submit a ') . l('HelpSU' , 'http://helpsu.stanford.edu/?pcat=sites') . t(' request for more storage. If you think this message is incorrect and the issue has been resolved try ') . l('checking again', 'admin/config/stanford-sites-helper/filequota/check') . ".";
  drupal_set_message($message, 'warning', FALSE);

}

/**
 * Sends an email about the status of the AFS storage usage to user 1
 * or the passed in array of emails.
 * @param  array  $emails an array of email accounts to send the email to.
 * @return boolean - True for success
 */
function _stanford_sites_helper_send_warning_email($emails = array()) {

  $to = !empty($emails) ? implode(",", $emails) : _stanford_sites_helper_get_user_1_email();
  $site_name = variable_get('site_name', 'Your Website');
  $from = $site_name . ' <no-reply@stanford.edu>';
  $params = array('site_name' => $site_name);
  $language = language_default();

  return drupal_mail('stanford_sites_helper', 'afsquota_warning', $to, $language, $params, $from);
}

/**
 * Returns user 1's email address
 * @return string - email address
 */
function _stanford_sites_helper_get_user_1_email() {
  $user = user_load(1);
  return $user->mail;
}

/**
 * Small helper function to check to see if request was an ajax request.
 * @return boolean [description]
 */
function _is_ajax_request() {
  return !empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest';
}

